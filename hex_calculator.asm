#### CODE TO DISPLAY ASCII VALUES AND SCAN KEYBOARD PRESSING
#### A SMALL HEXADECIMAL CALCULATOR
#### KEY GLOBAL REGISTERS
## X9: RETURN ADDRESS
## X29, X30, X31: DELAY COUNTER REGISTERS
## X1: ALWAYS STORE 1 TO SET CONTROL SIGNALS TO HIGH FOR LCD
## X2: ALWAYS USED TO STORE A 32 BIT CONSTANT USING LUI AND ORI INSTRUCTIONS
## X10, X11, X12: ALWAYS USED AS INPUT PARAMTER REGISTERS TO THE DISP (CHARACTER) PROCEDURE
## X18: CURRENT KEY VALUE REGISTER (FOR KEY DETECTION)
## X19: CURRENT CURSOR POSITION REGISTER (FOR CALCULATOR)
## X20: CURRENT INPUT (FOR CALCULATOR)
## X21: INPUT COUNTER (FOR CALCULATOR)

MAIN: LUI X1, 917504 #LOAD UPPER IMM WITH E0000
ORI X1, X1, 14 #LOAD LOWER 12-BIT WITH 00E, AS A RESULT X1=E000000E, REFERRING TO LCD CURRENT STATE REGISTER
LUI X2, 917520 #LOAD UPPER IMM WITH E0010
ORI X2, X2, 0 #LOAD LOWER 12-BIT WITH 000, AS A RESULT X2=E0010000, REFERRING TO LED DIODE CONTROL REGISTER. NOTE: THE ONLY LED ON FPGA2.PCB IS AT THE LSB
ADDI X3, X0, 5 #AFTER AUTOMATIC INITIATION, THE LCD MODULE SHOULD BE IN STATE 5 (101)
CHECKLCD: LW X4, 0(X1)
BNE X4, X3, CHECKLCD #WAIT UNTIL LCD IS DONE WITH INTIALIZATION
SW X4, 0(X2) # TURN ON LED SINCE X4=5 AND ITS LOWEST BIT IS 1
# HERE: JAL X3, HERE

## PRINT INITIALIZATION
PRINT: ADDI X1, X0, 1 # USE X0 TO WRITE A LOW LEVEL 0, AND X1 TO WRITE A HIGH LEVEL 1
# SET LCD WRITE MODE
LUI X2, 917504
ORI X2, X2, 10 #LOAD X2 = E000000A TO ADDRESS LCD_READ_ENABLE SIGNAL
SH X0, 0(X2) #LCD_READ_ENABLE = 0, I.E. SET LCD IN WRITE MODE SO THAT IT WILL ONLY RECEIVE COMMANDS FROM CPU
# LOWER LCD_CS TO SELECT THE LCD
LUI X2, 917504
ORI X2, X2, 0
SH X0, 0(X2) #LCD_CS = 0

## DELAY FOR 1S
JAL X9, DELAY1S

## DISPLAY "RISC-V RV32I"
ADDI X10, X0, 32
ADDI X11, X0, 48
ADDI X12, X0, 82
JAL X9, DISP
ADDI X10, X0, 32
ADDI X11, X0, 60
ADDI X12, X0, 73
JAL X9, DISP
ADDI X10, X0, 32
ADDI X11, X0, 72
ADDI X12, X0, 83
JAL X9, DISP
ADDI X10, X0, 32
ADDI X11, X0, 84
ADDI X12, X0, 67
JAL X9, DISP
ADDI X10, X0, 32
ADDI X11, X0, 96
ADDI X12, X0, 45
JAL X9, DISP
ADDI X10, X0, 32
ADDI X11, X0, 108
ADDI X12, X0, 86
JAL X9, DISP
ADDI X10, X0, 32
ADDI X11, X0, 120
ADDI X12, X0, 32
JAL X9, DISP
ADDI X10, X0, 32
ADDI X11, X0, 132
ADDI X12, X0, 82
JAL X9, DISP
ADDI X10, X0, 32
ADDI X11, X0, 144
ADDI X12, X0, 86
JAL X9, DISP
ADDI X10, X0, 32
ADDI X11, X0, 156
ADDI X12, X0, 51
JAL X9, DISP
ADDI X10, X0, 32
ADDI X11, X0, 168
ADDI X12, X0, 50
JAL X9, DISP
ADDI X10, X0, 32
ADDI X11, X0, 180
ADDI X12, X0, 73
JAL X9, DISP

## DELAY FOR 1S
JAL X9, DELAY1S

## DISPLAY "CALCULATOR"
ADDI X10, X0, 64
ADDI X11, X0, 60
ADDI X12, X0, 67
JAL X9, DISP
ADDI X10, X0, 64
ADDI X11, X0, 72
ADDI X12, X0, 65
JAL X9, DISP
ADDI X10, X0, 64
ADDI X11, X0, 84
ADDI X12, X0, 76
JAL X9, DISP
ADDI X10, X0, 64
ADDI X11, X0, 96
ADDI X12, X0, 67
JAL X9, DISP
ADDI X10, X0, 64
ADDI X11, X0, 108
ADDI X12, X0, 85
JAL X9, DISP
ADDI X10, X0, 64
ADDI X11, X0, 120
ADDI X12, X0, 76
JAL X9, DISP
ADDI X10, X0, 64
ADDI X11, X0, 132
ADDI X12, X0, 65
JAL X9, DISP
ADDI X10, X0, 64
ADDI X11, X0, 144
ADDI X12, X0, 84
JAL X9, DISP
ADDI X10, X0, 64
ADDI X11, X0, 156
ADDI X12, X0, 79
JAL X9, DISP
ADDI X10, X0, 64
ADDI X11, X0, 168
ADDI X12, X0, 82
JAL X9, DISP

## DELAY FOR 1S
JAL X9, DELAY1S

## DISPLAY KEYBOARD LAYOUT
JAL X9, KEYBOARD

## AN INFINITE LOOP TO SCAN BUTTON ACTIVITIES
ADDI X19, X0, 0 # SET THE BEGINNING POSITION OF THE CURSOR
ADDI X20, X0, 0 # SET THE CURRENT INPUT AS OPERAND1
ADDI X21, X0, 0 # SET THE INPUT COUTNER 0
INFLOOP: LUI X2, 917520
ORI X2, X2, 0 #LOAD X2 = E00100000 TO READ THE BUTTON VALUES
LW X28, 0(X2) #X28 CONTAINS THE LOADED BUTTON VALUES
SLTI X27, X28, 7
BEQ X27, X0, INFLOOP #A PRESSED BUTTON WILL SET X27 TO 1
JAL X9, DELAY10MS # WAIT 10MS TO CHECK AGAIN
LUI X2, 917520
ORI X2, X2, 0
LW X26, 0(X2)
BNE X26, X28, INFLOOP # ANTI-BOUNCING TEST
ADDI X27, X0, 7
RELEASE: LW X26, 0(X2)
BNE X26, X27, RELEASE #WAIT FOR KEY RELEASE TO AVOID PROCESSING A BUTTON PRESS MULTIPLE TIMES

ADDI X27, X0, 3 # KEY 3 PRESSED - RIGHT KEY
BNE X28, X27, NEXT1
ADDI X10, X0, 304
ADDI X11, X0, 108
ADDI X12, X0, 75
JAL X9, DISP
ADDI X10, X0, 304
ADDI X11, X0, 120
ADDI X12, X0, 51
JAL X9, DISP
ADDI X18, X28, 0
JAL X9, KEYPROCESSING
JAL X9, INFLOOP

NEXT1: ADDI X27, X0, 5 # KEY 2 PRESSED - MIDDLE KEY
BNE X28, X27, NEXT2
ADDI X10, X0, 304
ADDI X11, X0, 108
ADDI X12, X0, 75
JAL X9, DISP
ADDI X10, X0, 304
ADDI X11, X0, 120
ADDI X12, X0, 50
JAL X9, DISP
ADDI X18, X28, 0
JAL X9, KEYPROCESSING
JAL X9, INFLOOP

NEXT2: ADDI X27, X0, 6 # KEY 1 PRESSED - LEFT KEY
BNE X28, X27, INFLOOP
ADDI X10, X0, 304
ADDI X11, X0, 108
ADDI X12, X0, 75
JAL X9, DISP
ADDI X10, X0, 304
ADDI X11, X0, 120
ADDI X12, X0, 49
JAL X9, DISP
ADDI X18, X28, 0
JAL X9, KEYPROCESSING
JAL X9, INFLOOP

## PROGRAM FINISH
LUI X2, 917504
ORI X2, X2, 0
SH X1, 0(X2) #DE-SELECT THE LCD MODULE
FINISH: JAL X9, FINISH

################ PROCEDURE TO DISPLAY AN ASCII CHARACTER ###############
#### X10 STORES THE STARTING ROW PIXEL COUNT AND X11 STORES THE STARTING COLUMN PIXEL COUNT
#### THE STARTING POSITION IS THE UPPERLEFT CORNER OF THE CHARACTER
#### X12 STORES THE ASCII VALUE OF THE CHARACTER TO BE PRINTED
## SET ROW RANGE, WHICH DOES NOT CHANGE FOR EACH COLUMN. PIXEL WRITING WILL BE PERFORMED IN A COLUMN MAJOR ORDER
# LOWER LCD_CD TO SEND COMMAND
DISP: LUI X2, 917504
ORI X2, X2, 2 # LOAD X2 = E0000002 TO ADDRESS LCD_CD SIGNAL
SH X0, 0(X2)
# WRITE COMMAND WORD 2B TO CONFIGURE THE ROW (0-319)
LUI X2, 917504
ORI X2, X2, 12 # LOAD X2 = E000000C TO ADDRESS LCD DATA PORT
ADDI X13, X0, 43 # 2B, PREPARE COMMAND WORD: ILI9341_PAGEADDRSET 0X2B
SH X13, 0(X2)
# ISSUE AN LCD_WR LOW
LUI X2, 917504
ORI X2, X2, 4 # LOAD X2 = E0000004 TO ADDRESS LCD_WR SIGNAL
SH X0, 0(X2)
# ISSUE AN LCD_WR HIGH
SH X1, 0(X2)
# RAISE LCD_CD TO HIGH TO SEND DATA
LUI X2, 917504
ORI X2, X2, 2
SH X1, 0(X2)
# START ROW ADDRESS - HIGH BYTE
LUI X2, 917504
ORI X2, X2, 12
ADDI X13, X10, 0
SRLI X13, X13, 8
SH X13, 0(X2)
# WRITE A LOW TO HIGH TRANSITION TO LCD_WR
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
# START ROW ADDRESS - LOW BYTE
LUI X2, 917504
ORI X2, X2, 12
SH X10, 0(X2) # WRITE LOW BYTE OF THE START ROW, X10[7:0] ARE EFFECTIVE SINCE THE DATA PORT OF THE LCD IS 8-BIT WIDE
# WRITE A LOW TO HIGH TRANSITION TO LCD_WR
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
# END ROW ADDRESS - HIGH BYTE
LUI X2, 917504
ORI X2, X2, 12
ADDI X13, X10, 15
SRLI X13, X13, 8
SH X13, 0(X2)
# WRITE A LOW TO HIGH TRANSITION TO LCD_WR
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
# END ROW ADDRESS - LOW BYTE
LUI X2, 917504
ORI X2, X2, 12
ADDI X13, X10, 15
SH X13, 0(X2) # WRITE LOW BYTE OF THE END ROW, X13[7:0] ARE EFFECTIVE SINCE THE DATA PORT OF THE LCD IS 8-BIT WIDE
# WRITE A LOW TO HIGH TRANSITION TO LCD_WR
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
## 12 COLUMNS TO WRITE
ADDI X14, X0, 12 #SET COLUMN LOOP VARIABLE (OUTER)
COLUMNLOOP: BEQ X14, X0, EXIT
NEXTCOLUMN: ADDI X14, X14, -1
# LOWER LCD_CD TO SEND COMMAND FIRST
LUI X2, 917504
ORI X2, X2, 2
SH X0, 0(X2)
# WRITE COMMAND 0X2A TO CONFIGURE COLUMN ADDRESS (0-239)
LUI X2, 917504
ORI X2, X2, 12
ADDI X13, X0, 42 # PREPARE COMMAND WORD: ILI9341_COLADDRSET 0X2A
SW X13, 0(X2)
# WRITE A LOW TO HIGH TRANSITION TO LCD_WR
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
# RAISE LCD_CD TO SEND DATA NEXT
LUI X2, 917504
ORI X2, X2, 2
SH X1, 0(X2)
# START COLUMN ADDRESS - HIGH BYTE
LUI X2, 917504
ORI X2, X2, 12
ADD X13, X11, X14
SRLI X13, X13, 8
SH X13, 0(X2)
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
# START COLUMN ADDRESS - LOW BYTE
LUI X2, 917504
ORI X2, X2, 12
ADD X13, X11, X14
SH X13, 0(X2) # X13[7:0] ARE EFFECTIVE
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
# END COLUMN ADDRESS - HIGH BYTE
LUI X2, 917504
ORI X2, X2, 12
ADD X13, X11, X14
SRLI X13, X13, 8
SH X13, 0(X2)
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
# END COLUMN ADDRESS - LOW BYTE
LUI X2, 917504
ORI X2, X2, 12
ADD X13, X11, X14
SH X13, 0(X2) # X13[7:0] ARE EFFECTIVE
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
## READ THE FONT RAM TO GET THE COLUMN WORD INTO X15
LUI X2, 917505
SLLI X13, X12, 5
ADD X2, X2, X13 
SLLI X13, X14, 1
ADD X2, X2, X13
LHU X15, 0(X2) # THE 16-BIT PIXEL WORD IN X15
## 16 PIXELS TO WRITE
LUI X2, 917504
ORI X2, X2, 2
SH X0, 0(X2) # LCD_CD = 0 FOR COMMAND
LUI X2, 917504
ORI X2, X2, 12
ADDI X13, X0, 44 # PREAPRE COMMAND 0X2C (FILL IN PIXEL DATA)
SH X13, 0(X2)
LUI X2, 917504
ORI X2, X2, 4 # WRITE A LOW-TO-HIGH TRANSITION TO LCD_WR
SH X0, 0(X2)
SH X1, 0(X2)
LUI X2, 917504
ORI X2, X2, 2
SH X1, 0(X2) # LCD_CD = 1 FOR DATA
ADDI X16, X0, 16 # PIXEL COUNTER IN X16
SLLI X17, X1, 15 # PREPARE THE MASK REGISTER X17, INITIALLY SET TO ENABLE THE TESTING OF BIT15 OF THE READ PIXEL WORD
PIXELLOOP: BEQ X16, X0, COLUMNLOOP
AND X13, X15, X17 #USE MASK REGISTER TO MASK IRRELEVANT BITS
SRLI X17, X17, 1 #PREPARE TO MASK THE NEXT BIT
ADDI X16, X16, -1 #UPDATE PIXEL LOOP VARIABLE
BEQ X13, X0, WRITE0
# WRITE 1 WITH 16'd65535: A WHITE PIXEL (RGB565)
# COLOR HIGH BYTE
WRITE1: LUI X2, 917504
ORI X2, X2, 12
ADDI X13, X0, 255
SH X13, 0(X2)
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
# COLOR LOW BYTE
LUI X2, 917504
ORI X2, X2, 12
ADDI X13, X0, 255
SH X13, 0(X2)
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
JAL X13, PIXELLOOP
# WRITE 0 WITH 16'd31: BLUE PIXEL
# COLOR HIGH BYTE
WRITE0: LUI X2, 917504
ORI X2, X2, 12
ADDI X13, X0, 0
SH X13, 0(X2)
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
# COLOR LOW BYTE
LUI X2, 917504
ORI X2, X2, 12
ADDI X13, X0, 31
SH X13, 0(X2)
LUI X2, 917504
ORI X2, X2, 4
SH X0, 0(X2)
SH X1, 0(X2)
JAL X13, PIXELLOOP 
EXIT: JALR X2, 0(X9) # EQUIVALENT TO JR $RA IN MIPS SINCE X9 CONTAINS RETURN ADDRESS AND OFFSET IS SET 0
#### DISP FUNCTION BODY ENDS HERE ####

############# DELAY10MS PROCEDURE ###########
## X29 OUTER LOOP COUNTING, X30 INNER LOOP COUNTING##
DELAY10MS: LUI X29, 0
ORI X29, X29, 100
INNER2A: LUI X30, 0
ORI X30, X30, 1250 
INNER1A: ADDI X30, X30, -1
BNE X30, X0, INNER1A
ADDI X29, X29, -1
BNE X29, X0, INNER2A
JALR X29, 0(X9) 
### DELAY10MS PROCEDURE ENDS HERE ###########

############# DELAY1S PROCEDURE ###########
## X29 OUTER LOOP COUNTING, X30 INNER LOOP COUNTING##
DELAY1S: LUI X31, 3535
SRLI X31, X31, 12
LUI X29, 0
OR X29, X29, X31
INNER2B: LUI X31, 3535
SRLI X31, X31, 12
LUI X30, 0
OR X30, X30, X31
INNER1B: ADDI X30, X30, -1
BNE X30, X0, INNER1B
ADDI X29, X29, -1
BNE X29, X0, INNER2B
JALR X29, 0(X9) 
### DELAY1S PROCEDURE ENDS HERE ###########

############# KEYPROCESSING PROCEDURE ###############
## X18: CURRENT KEY VALUE, X19: CURRENT CURSOR POSITION, X20: CURRENT INPUT, X21: INPUT COUNTER ##
KEYPROCESSING: ADDI X25, X9, 0 #BACK UP THE RETURN ADDRESS
ADDI X26, X0, 6 #LEFT KEY
BEQ X18, X26, LEFTKEY
ADDI X26, X0, 5 #MIDDLE KEY
BEQ X18, X26, MIDDLEKEY
ADDI X26, X0, 3 #RIGHT KEY 
BEQ X18, X26, RIGHTKEY
JAL X29, RTN1

# PROCESS LEFT KEY BY MOVING THE CURSOR BACKWARD ONE STEP
LEFTKEY: LUI X2, 8 # CLEAR THE CURRENT CURSOR
ADDI X10, X19, 0
SLLI X10, X10, 3 # ROW 4 BYTES, COLUMN 4 BYTES, TOTAL 8 BYTES
ADD X2, X2, X10
LW X10, 0(X2)
ADDI X10, X10, 16
LW X11, 4(X2)
ADDI X12, X0, 32 # DISPLAY A SPACE TO CLEAR THE CURSOR
JAL X9, DISP
ADDI X19, X19, -1 # DECREMENT CURSOR POSITION
BGE X19, X0, NEWCURSOR1
ADDI X19, X0, 19 # IF CURSOR POSITION BECOMES NEGATIVE, SET IT TO THE END
NEWCURSOR1: LUI X2, 8 # CURSOR ROW AND COLUMN POSITIONS ARE STORED IN THE 4KW RAM'S FIRST FEW WORDS
ADDI X10, X19, 0
SLLI X10, X10, 3 # ROW 4 BYTES, COLUMN 4 BYTES, TOTAL 8 BYTES
ADD X2, X2, X10
LW X10, 0(X2)
ADDI X10, X10, 16
LW X11, 4(X2)
ADDI X12, X0, 94
JAL X9, DISP
JAL X29, RTN1

# PROCESS MIDDLE KEY BY PERFORMING AN OPERATION
MIDDLEKEY: BNE X20, X0, FIELD1
ADDI X26, X0, 16
BLT X19, X26, ENTERDIGIT0
BEQ X19, X26, ENTERBACKSPACE0
ADDI X26, X0, 19
BNE X19, X26, NEXTFIELD0
JAL X29, EXIT4
ENTERDIGIT0: ADDI X26, X0, 8 #MAXIMUM 8 DIGITS FOR ANY OPERAND
BGE X21, X26, ED0DONE
LUI X2, 8
ORI X2, X2, 256 # FIRST OPERAND STORAGE ADDRESS IN MEMORY: 00008100 - 0000811F
SLLI X26, X21, 2
ADD X2, X2, X26
SW X19, 0(X2)
ADDI X10, X0, 192
SLLI X26, X21, 4 # OBTAIN INPUT_COUNTER * 12
SLLI X27, X21, 2 # OBTAIN INPUT_COUNTER * 12
SUB X26, X26, X27 # OBTAIN INPUT_COUNTER * 12
ADDI X26, X26, 12
ADDI X11, X26, 0
ADDI X26, X0, 10
BGE X19, X26, LETTER0A
ADDI X12, X19, 48
JAL X9, DISP
ADDI X21, X21, 1
JAL X29, ED0DONE
LETTER0A: ADDI X12, X19, 55
JAL X9, DISP
ADDI X21, X21, 1      
ED0DONE: JAL X29, EXIT4
ENTERBACKSPACE0: BLT X0, X21, DEL0
JAL X29, EXIT4
DEL0: ADDI X21, X21, -1
ADDI X10, X0, 192
SLLI X26, X21, 4 # OBTAIN INPUT_COUNTER * 12
SLLI X27, X21, 2 # OBTAIN INPUT_COUNTER * 12
SUB X26, X26, X27 # OBTAIN INPUT_COUNTER * 12
ADDI X26, X26, 12
ADDI X11, X26, 0
ADDI X12, X0, 32
JAL X9, DISP
JAL X29, EXIT4
NEXTFIELD0: BNE X21, X0, CONTINUE0 #FIRST OPERAND CANNOT BE EMPTY TO PRESS +/- KEY
JAL X29, EXIT4   
CONTINUE0: ADDI X20, X0, 1 #TO INDICATE FIELD 0 IS DONE AND FIELD 1 IS ABOUT TO BEGIN
ADDI X22, X21, 0 #RECORD THE NUMBER OF DIGITS OF THE FIRST OPERAND IN X22 
ADDI X21, X0, 0 #RESET INPUT COUNTER FOR FIELD1
ADDI X24, X19, 0 #RECORD THE OPERATOR IN X24
ADDI X26, X0, 17
BEQ X24, X26, PLUS0
ADDI X10, X0, 192
ADDI X11, X0, 120
ADDI X12, X0, 45
JAL X9, DISP
JAL X29, EXIT4
PLUS0: ADDI X10, X0, 192
ADDI X11, X0, 120
ADDI X12, X0, 43
JAL X9, DISP
JAL X29, EXIT4

FIELD1: BNE X20, X1, FIELD2
ADDI X26, X0, 16
BLT X19, X26, ENTERDIGIT1
BEQ X19, X26, ENTERBACKSPACE1
ADDI X26, X0, 19
BEQ X19, X26, SHOWRES
JAL X29, EXIT4
ENTERDIGIT1: ADDI X26, X0, 8 #MAXIMUM 8 DIGITS FOR ANY OPERAND
BGE X21, X26, ED1DONE
LUI X2, 8
ORI X2, X2, 288 # SECOND OPERAND STORAGE ADDRESS IN MEMORY: 00008120 - 0000813F
SLLI X26, X21, 2
ADD X2, X2, X26
SW X19, 0(X2)
ADDI X10, X0, 192
SLLI X26, X21, 4 # OBTAIN INPUT_COUNTER * 12
SLLI X27, X21, 2 # OBTAIN INPUT_COUNTER * 12
SUB X26, X26, X27 # OBTAIN INPUT_COUNTER * 12
ADDI X26, X26, 144
ADDI X11, X26, 0
ADDI X26, X0, 10
BGE X19, X26, LETTER1A
ADDI X12, X19, 48
JAL X9, DISP
ADDI X21, X21, 1
JAL X29, ED1DONE
LETTER1A: ADDI X12, X19, 55
JAL X9, DISP
ADDI X21, X21, 1      
ED1DONE: JAL X29, EXIT4
ENTERBACKSPACE1: BLT X0, X21, DEL1
JAL X29, EXIT4
DEL1: ADDI X21, X21, -1
ADDI X10, X0, 192
SLLI X26, X21, 4 # OBTAIN INPUT_COUNTER * 12
SLLI X27, X21, 2 # OBTAIN INPUT_COUNTER * 12
SUB X26, X26, X27 # OBTAIN INPUT_COUNTER * 12
ADDI X26, X26, 144
ADDI X11, X26, 0
ADDI X12, X0, 32
JAL X9, DISP
JAL X29, EXIT4
SHOWRES: BNE X21, X0, CONTINUE1 # SECOND OPERAND CANNOT BE EMPTY TO PRESS = KEY
JAL X29, EXIT4   
CONTINUE1: ADDI X20, X0, 2 #TO INDICATE FIELD 1 IS DONE AND FIELD 2 IS ABOUT TO BEGIN
ADDI X23, X21, 0 #RECORD THE NUMBER OF DIGITS OF THE SECOND OPERAND IN X23 
ADDI X21, X0, 0 #RESET INPUT COUNTER FOR FIELD2
# FINISH COMPUTING AND DISPLAY RESULT
# FETCH AND ASSEMBLE THE FIRST OPERAND
ADDI X26, X0, 0
ADDI X27, X0, 0
ADDI X29, X0, 0
OP1: BEQ X29, X22, PREOP2
SLLI X26, X26, 4
LUI X2, 8
ORI X2, X2, 256
SLLI X30, X29, 2
ADD X2, X2, X30
LW X30, 0(X2)
ADD X26, X26, X30
ADDI X29, X29, 1
JAL X31, OP1
PREOP2: ADDI X29, X0, 0
OP2: BEQ X29, X23, PERFORM
SLLI X27, X27, 4
LUI X2, 8
ORI X2, X2, 288
SLLI X30, X29, 2
ADD X2, X2, X30
LW X30, 0(X2)
ADD X27, X27, X30
ADDI X29, X29, 1
JAL X31, OP2
PERFORM: ADDI X31, X0, 17
BEQ X24, X31, ADDCALC
SUB X31, X26, X27
JAL X29, PRINTRES
ADDCALC: ADD X31, X26, X27
PRINTRES: ADDI X10, X0, 208
ADDI X11, X0, 0
ADDI X12, X0, 61 # SHOW = SIGN
JAL X9, DISP
ADDI X30, X0, 8
ADDI X29, X0, 0
ADDI X26, X0, 15
SLLI X26, X26, 28
ADDI X27, X0, 28
PRINTLOOP: BGE X29, X30, FIELD1DONE 
AND X22, X31, X26
SRL X22, X22, X27
ADDI X23, X0, 10
BGE X22, X23, PRINTLETTER
ADDI X12, X22, 48
JAL X9, DISP5
PRINTLETTER: ADDI X12, X22, 55 
DISP5: ADDI X10, X0, 208
SLLI X11, X29, 4
SLLI X23, X29, 2
SUB X11, X11, X23
ADDI X11, X11, 12
JAL X9, DISP
ADDI X29, X29, 1
SRLI X26, X26, 4
ADDI X27, X27, -4
JAL X9, PRINTLOOP
FIELD1DONE: JAL X29, EXIT4

FIELD2: ADDI X20, X0, 0
ADDI X21, X0, 0  
ADDI X26, X0, 16
BNE X19, X26, EXIT4
ADDI X26, X0, 19
ADDI X10, X0, 192
ADDI X11, X0, 12
ADDI X12, X0, 32
CLEAROP1: BEQ X26, X0, PREPCLEAROP2
JAL X9, DISP
ADDI X11, X11, 12
ADDI X26, X26, -1
JAL X29, CLEAROP1
PREPCLEAROP2: ADDI X26, X0, 9 
ADDI X10, X0, 208
ADDI X11, X0, 0
ADDI X12, X0, 32
CLEAROP2: BEQ X26, X0, EXIT4
JAL X9, DISP
ADDI X11, X11, 12
ADDI X26, X26, -1
JAL X29, CLEAROP2
EXIT4: JAL X29, RTN1

# PROCESS RIGHT KEY BY MOVING THE CURSOR FORWARD ONE STEP
RIGHTKEY: LUI X2, 8 # CLEAR THE CURRENT CURSOR
ADDI X10, X19, 0
SLLI X10, X10, 3 # ROW 4 BYTES, COLUMN 4 BYTES, TOTAL 8 BYTES
ADD X2, X2, X10
LW X10, 0(X2)
ADDI X10, X10, 16
LW X11, 4(X2)
ADDI X12, X0, 32 # DISPLAY A SPACE TO CLEAR THE CURSOR
JAL X9, DISP
ADDI X19, X19, 1 # INCREMENT CURSOR POSITION
ADDI X27, X0, 20
BLT X19, X27, NEWCURSOR2
ADDI X19, X0, 0 # IF CURSOR POSITION IS LARGER THAN THE MAX POSITION, SET IT TO THE BEGINNING
NEWCURSOR2: LUI X2, 8 # CURSOR ROW AND COLUMN POSITIONS ARE STORED IN THE 4KW RAM'S FIRST FEW WORDS
ADDI X10, X19, 0
SLLI X10, X10, 3 # ROW 4 BYTES, COLUMN 4 BYTES, TOTAL 8 BYTES
ADD X2, X2, X10
LW X10, 0(X2)
ADDI X10, X10, 16
LW X11, 4(X2)
ADDI X12, X0, 94
JAL X9, DISP

RTN1: ADDI X9, X25, 0
JALR X29, 0(X9)
#### KEYPROCESSING PROCEDURE ENDS HERE ####


############## KEYBOARD PROCEDURE ###############
KEYBOARD: ADDI X25, X9, 0 #BACK UP THE RETURN ADDRESS

ADDI X10, X0, 128
ADDI X11, X0, 12
ADDI X12, X0, 48 # CHAR 0
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 0(X2)
SW X11, 4(X2)
ADDI X10, X0, 128
ADDI X11, X0, 36
ADDI X12, X0, 49 # CHAR 1
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 8(X2)
SW X11, 12(X2)
ADDI X10, X0, 128
ADDI X11, X0, 60
ADDI X12, X0, 50 # CHAR 2
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 16(X2)
SW X11, 20(X2)
ADDI X10, X0, 128
ADDI X11, X0, 84
ADDI X12, X0, 51 # CHAR 3
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 24(X2)
SW X11, 28(X2)
ADDI X10, X0, 128
ADDI X11, X0, 108
ADDI X12, X0, 52 # CHAR 4
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 32(X2)
SW X11, 36(X2)
ADDI X10, X0, 128
ADDI X11, X0, 132
ADDI X12, X0, 53 # CHAR 5
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 40(X2)
SW X11, 44(X2)
ADDI X10, X0, 128
ADDI X11, X0, 156
ADDI X12, X0, 54 # CHAR 6
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 48(X2)
SW X11, 52(X2)
ADDI X10, X0, 128
ADDI X11, X0, 180
ADDI X12, X0, 55 # CHAR 7
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 56(X2)
SW X11, 60(X2)
ADDI X10, X0, 128
ADDI X11, X0, 204
ADDI X12, X0, 56 # CHAR 8
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 64(X2)
SW X11, 68(X2)
ADDI X10, X0, 128
ADDI X11, X0, 228
ADDI X12, X0, 57 # CHAR 9
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 72(X2)
SW X11, 76(X2)
ADDI X10, X0, 160
ADDI X11, X0, 12
ADDI X12, X0, 65 # CHAR A
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 80(X2)
SW X11, 84(X2)
ADDI X10, X0, 160
ADDI X11, X0, 36
ADDI X12, X0, 66 # CHAR B
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 88(X2)
SW X11, 92(X2)
ADDI X10, X0, 160
ADDI X11, X0, 60
ADDI X12, X0, 67 # CHAR C
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 96(X2)
SW X11, 100(X2)
ADDI X10, X0, 160
ADDI X11, X0, 84
ADDI X12, X0, 68 # CHAR D
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 104(X2)
SW X11, 108(X2)
ADDI X10, X0, 160
ADDI X11, X0, 108
ADDI X12, X0, 69 # CHAR E
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 112(X2)
SW X11, 116(X2)
ADDI X10, X0, 160
ADDI X11, X0, 132
ADDI X12, X0, 70 # CHAR F
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 120(X2)
SW X11, 124(X2)
ADDI X10, X0, 160
ADDI X11, X0, 156
ADDI X12, X0, 127 # CHAR DEL IS A LEFT ARROW
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 128(X2)
SW X11, 132(X2)
ADDI X10, X0, 160
ADDI X11, X0, 180
ADDI X12, X0, 43 # CHAR +
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 136(X2)
SW X11, 140(X2)
ADDI X10, X0, 160
ADDI X11, X0, 204
ADDI X12, X0, 45 # CHAR -
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 144(X2)
SW X11, 148(X2)
ADDI X10, X0, 160
ADDI X11, X0, 228
ADDI X12, X0, 61 # CHAR =
JAL X9, DISP
LUI X2, 8
ORI X2, X2, 0 #PREPARE MEMORY ADDRESS TO STORE ROW AND COLUMN INFO OF EACH CHARACTER ON THE SCREEN FOR LATER USE
SW X10, 152(X2)
SW X11, 156(X2)

ADDI X10, X0, 144
ADDI X11, X0, 12
ADDI X12, X0, 94 # DISPLAY ^ TO INDICATE THE CURSOR POSITION
JAL X9, DISP

ADDI X9, X25, 0 # RESTORE RETURN ADDRESS
JALR X29, 0(X9)

###### KEYBOARD PROCEDURE ENDS ###########


